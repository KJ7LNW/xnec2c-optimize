#!/usr/bin/perl
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 3 of the License, or
#  (at your option) any later version.
# 
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU Library General Public License for more details.
# 
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
# 
#  Copyright (C) 2021- by Eric Wheeler, KJ7LNW.  All rights reserved.
#
#  The official website and doumentation for xnec2c-optimizer is available here:
#    https://www.xnec2c.org/
#

# Reduce the goal frequency range by 5MHz and increase the FR card's range so
# we can see more of the graph than only what is being optimized. This variable
# is not a configuration option, it is used below.
my $mhz_shrink = 5; # MHz

# Keep this line, the whole config is a hash evaluated by do() because
# there are subs in the goal section.
{ 

# See PDL::Opt::Simplex::Simple for documentation on the simplex settings:
simplex => {

	# Initial simplex size: bigger values explore a wider variable range:
	ssize => 0.090,

	# Use multiple ssizes to run multiple simplex optimizations
	# at additional refinement:
	#ssize => [ 0.090, 0.075, 0.050, 0.025, 0.012 ],

	# Tolerance: end early if simplex isn't moving much:
	tolerance => 1e-6,

	# Max iterations: you may get a more refined result by increasing this:
	max_iter => 500,
	
	# Maximum number of iterations that return a worse minima
	# than the previous minima before canceling the current
	# iteration due to stagnation.  Typically this option
	# drives the optimization time because tolerance and
	# max_iter are more than they need to be.  Setting this too
	# low will provide poor results, setting it too high will
	# just take longer when it gets stuck.
	stagnant_minima_count => 30,

	# Optional:
	#   Seed the random number generator to make this deterministic.
	#   Simplex makes use of random perturbation, so if you want to see
	#   what random results come after multiple runs, then comment this seed:
	#   (Actually this isn't quite as non-deterministic as I would like.)
	#'srand' => 1385659192,
	
},

############################################################################
# NEC2 Geometry Variables

# These variables are optimized by simplex.  You can use these variables
# in the the NEC2 geometry function below, in the "nec2" section.
#
# See `perldoc PDL::Opt::Simplex::Simple` for full variable option documentation.

# yagi dimensions from https://www.qsl.net/dk7zb/PVC-Yagis/5-Ele-2m.htm
vars => {
	# Element lengths
	lengths => {
			values  => [ 1.038, 0.995, 0.959, 0.949, 0.935 ],
			enabled => [ 1,     1,     1,     1,     1 ],

			# Round to 1.0mm when saving the final .nec output
			# because the geometry sub below divides by 2:
			round_result   => 0.001,

			# Optional: Perturb the lengths less than the spaces while optimizing:
			#perturb_scale => .2, 
		},

	# Spaces between elements:
	spaces => {
			values  => [ 0.000, 0.280, 0.15, 0.520, 0.53 ],
			enabled => [ 0,     1,     1,    1,     1 ],

			# Round to 0.5mm when saving the final .nec output:
			round_result   => 0.0005,
			
			# Optional: Perturb the spaces less than the lengths while optimizing:
			#perturb_scale => 1.5,
		},

	wire_rad => {
			values => 0.002, # 2mm
			enabled => 0,
		},

	# must be odd!
	wire_segments => {
			values => 11,
			enabled => 0,
		}
},


############################################################################
# NEC2 Geometry

# This function takes a $vars as passed to f() by PDL::Opt::Simplex::Simple
# in the simplified format.  (The vars are defined above in the expanded
# format so fields can be enabled/disabled.)
#
# This nec2 coderef must return an NEC2 perl object that defines the entire
# NEC2 geometry:

nec2 => sub {
	use strict;

	my $vars = shift;

	# See `perldoc NEC2` and `perldoc NEC2::Card` for NEC2 documentation.
	my $nec2 = NEC2->new(comment => [
		'Initial dimensions by Martin Steyer, DK7ZB',
		'http://www.qsl.net/dk7zb/PVC-Yagis/5-Ele-2m.htm'
		]);
	
	# The Yagi constructor takes the same vars format that
	# is specified above:
	my $yagi = NEC2::Antenna::Yagi->new(%$vars);

	
	# Here we add the $yagi object, but you could do your own geometry
	# elements (eg GW, GH, etc) and $nec2->add(...) them here:
	$nec2->add($yagi);

	# Note that the NEC2::Antenna::Yagi class includes
	# an EX card in the center of the 2nd radiated element, so
	# the EX card is not defined here:
	$nec2->add(
		# Free Space:
		GE(ground => 0),
		RP(ground => 0),

		# With ground:
		#GE(ground => 1),
		#GN(type => 1),
		#RP(ground => 1),

		NH,
		NE,
		Z0(z0 => 50),
		FR(mhz_min => 144-$mhz_shrink, mhz_max => 148+$mhz_shrink, n_freq => 100),
	);
	
	return $nec2;
},

# See `perldoc NEC2::xnec2c::optimize` for full goal documentation.
goals => [
	{ 
		name => 'Max gain',
		field => 'Gain-max',
		enabled => 1,

		# Reduce the goal frequency range by 5MHz from the FR card's range so
		# we can see more of the graph than only what is being optimized.
		mhz_shrink => $mhz_shrink,

		weight => 10,
		
		type => 'avg', # calculate minima by sum, avg, min, max, or mag

		# Simplex minimizes, so return a negative value and raise it to a power.
		# A higher power makes the max-gain higher, raises VSWR
		# A lower power makes a flater curve, lowers VSWR
		result => sub { my ($gain,$mhz)=@_; return -$gain**0.5; }
	},

	{ 
		name => 'VSWR',
		field => 'VSWR',
		enabled => 1,

		mhz_shrink => $mhz_shrink,

		# Multiplicative weight, relative scale of the goal
		weight => 5,

		type => 'avg',

		# The optmizer minimizes results, penalize VSWR exponentially: 
		# A larger base provides a flatter VSWR
		# A lower base reduces the strength of the VSWR penalty.
		result => sub { my ($vswr,$mhz)=@_; return 2**$vswr; }
	},
	{ 
		name => 'Front/Back Ratio',
		field => 'F/B Ratio',
		enabled => 1,

		mhz_shrink => $mhz_shrink,

		weight => 1,

		type => 'avg', 

		# Experiment with different result functions:
		#result => sub { my ($fb,$mhz)=@_; return -$fb**1.0; }
		#result => sub { my ($fb,$mhz)=@_; return 2**(20/$fb); }
		result => sub { my ($fb,$mhz)=@_; return (20/$fb); }
	},

	# Optional (disabled): Minimize antenna length.
	#   'field' is undefined, so this function will return a final goal result
	#   independent of all frequencies.
	{ 
		name => 'Antenna Length',
		enabled => 0,
		weight => 10,
		result => sub {
				my ($vars, $csv) = @_;
				my $spaces = $vars->{spaces};
				my ($zoff);

				$zoff += $_ foreach @$spaces;

				return $zoff - $spaces->[0];
			}
	},

	# Optional (disabled): Minimize antenna width
	#   'field' is undefined, so this function will return a final goal result
	#   independent of all frequencies.
	{ 
		name => 'Antenna Width',
		enabled => 0,
		weight => 10,
		result => sub {
				my ($vars, $csv) = @_;
				my $lengths = $vars->{lengths};
				my $width = 0;
				
				# find max width
				$width = ($_ > $width ? $_ : $width) foreach @$lengths;

				return $width;
			}
	}
]


}; #end of file


